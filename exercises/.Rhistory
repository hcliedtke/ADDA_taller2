knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = './')
library(webexercises)
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = './')
library(webexercises)
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse, DESeq2, pheatmap)
txi<-readRDS("../data/salmon_gene_counts.rds")
class(txi)
str(txi)
lapply(X=txi, FUN=head)
apply(X=txi$abundance, FUN=sum, MARGIN = 2)
# Log10 transform and plot with base R:
hist(log10(txi$abundance[,1]), breaks=50)
# a more detailed plot with the tidyverse:
txi$abundance %>%
as_tibble(rownames = "transcript") %>%
pivot_longer(-transcript, names_to="sample", values_to="TPM") %>%
ggplot(aes(x=TPM)) +
geom_histogram() +
ylab("number of transcripts") +
scale_x_log10() +
facet_wrap(~sample)
samples<-read.csv("./data/design_matrix.csv")
samples<-read.csv("../data/design_matrix.csv")
samples
samples %>%
select(treatment, tissue) %>%
ftable()
# perform VS transformation (the vst() function only likes integers!)
vst_counts<- txi$counts %>%
as.data.frame() %>%
mutate_all(as.integer) %>%
as.matrix() %>%
vst()
# remove 0-variance genes (remember to also convert counts to integers)
vst_counts<-vst_counts[apply(vst_counts, 1, var) != 0,]
# perform PCA on TRANSPOSED scaled, centered data
pca<- prcomp(t(vst_counts),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
labs(x=paste0("PC1 (", summary(pca)$importance["Proportion of Variance",1]*100, "%)"),
y=paste("PC2 (", summary(pca)$importance["Proportion of Variance",2]*100, "%)")) +
geom_point(size=3)
# perform VS transformation (the vst() function only likes integers!)
vst_counts_liver<- txi$counts %>%
as.data.frame() %>%
select(contains("Li")) %>%
mutate_all(as.integer) %>%
as.matrix() %>%
vst()
# remove 0-variance genes (remember to also convert counts to integers)
vst_counts_liver<-vst_counts_liver[apply(vst_counts_liver, 1, var) != 0,]
# perfomr PCA on TRANSPOSED scaled, centred data
pca_liver<- prcomp(t(vst_counts_liver),scale.=T, center=T)
## add metadata and plot
pca_liver$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>%
ggplot(aes(x=PC1, y=PC2, color=treatment)) +
geom_point(size=3)
# get sample-to-sample distance
sample_dist <- dist(t(vst_counts))
# convert to matrix
sample_dist_matrix <- as.matrix(sample_dist)
# plot
pheatmap(sample_dist_matrix,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")],
row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")],
row.names = "sample_id"))
# Sort the rows in vst matrix by the row-wise variance, and keep only the 500 most variable genes
var_genes <- apply(vst_counts,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value)) %>%
slice_head(n=500) %>%
pull(name)
head(var_genes) # list of genes we want to keep
vst_subset<-vst_counts[var_genes, ]
# check to see we really only have 500 genes
dim(vst_subset)
# plot heatmap (this time scaled by row)
pheatmap(vst_subset,
scale = "row",
cluster_rows=T, show_rownames=FALSE,
cluster_cols=T, show_colnames = T,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE,
fig.width=12)
knitr::opts_knit$set(root.dir = "./")
library(webexercises)
getwd()
# set working directory
#setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2,viridis,scales)
txi<-readRDS("../data/salmon_gene_counts.rds")
samples<-read_csv("../data/design_matrix.csv")
samples <- samples %>%
filter(tissue=="skin") %>%
mutate(condition=as.factor(paste(treatment, side, sep="_")))
## filter txi matrices
txi$abundance<-txi$abundance[,samples$sample_id]
txi$counts<-txi$counts[,samples$sample_id]
txi$length<-txi$length[,samples$sample_id]
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
dds
# see what assays are stored in the object:
assayNames(dds)
# call a specific assay by name
assay(dds, "counts") %>% head()
assay(dds, "avgTxLength") %>% head()
# call a specific assay with a specific function
counts(dds) %>% head()
colData(dds)
rowData(dds)
head(counts(dds))
head(txi$counts)
# keep only rows with with counts summing up to 10 or more
dds <- dds[rowSums(counts(dds)) >= 10,]
plotDispEsts(dds)
plotDispEsts(dds)
