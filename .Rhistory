tpm %>%
select(!contains("Li"))
tpm<-tpm %>%
select(!contains("Li"))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC3, y=PC4, color=treatment, shape=tissue)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
tpm<-tpm %>%
select(!contains("Li"))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
View(tpm)
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
pca$x %>%
as_tibble(rownames = "sample_id")
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
pca$x
tpm<-tpm %>%
select(!contains("Li"))
View(tpm)
tpm2<-tpm %>%
select(!contains("Li"))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm2),scale.=T, center=T)
tpm<-tpm %>%
select(!contains("Li")) %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=side)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC2, y=PC3, color=treatment, shape=side)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC3, y=PC4, color=treatment, shape=side)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=side)) +
geom_point(size=3)
tpm<-tpm %>%
select(contains("Li")) %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=side)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
# remove 0-variance genes
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
tpm<-tpm %>%
select(contains("Li")) %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
# remove 0-variance genes
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
# remove 0-variance genes
tpm<-txi$abundance %>% head*
as.data.frame() %>%
filter_all(any_vars(. != 0))
# remove 0-variance genes
tpm<-txi$abundance %>% head()
# remove 0-variance genes
tpm<-txi$abundance %>% head()
txi$abundance %>% head()
# remove 0-variance genes
tpm<-txi$abundance %>%
select(contains("Li")) %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
# remove 0-variance genes
tpm<-txi$abundance %>%
as.data.frame() %>%
select(contains("Li")) %>%
filter_all(any_vars(. != 0))
View(tpm)
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
# get sample-to-sample distance (again, using the transposed abundance matrix))
sample_dist <- dist(t(tpm))
sample_dist
# remove 0-variance genes
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
# get sample-to-sample distance (again, using the transposed abundance matrix))
sample_dist <- dist(t(tpm))
sample_dist
# convert to matrix
sample_dist_matrix <- as.matrix(sample_dist)
# plot
pheatmap(sample_dist_matrix,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
# plot
pheatmap(sample_dist_matrix)
# plot
pheatmap(sample_dist_matrix,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
View(tpm)
var_genes <- apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value)) %>%
slice_head(n=500) %>%
pull(name)
var_genes
apply(txi$abundance,MAR=1, FUN=var)
apply(txi$abundance,MAR=1, FUN=var)
apply(txi$abundance,MAR=1, FUN=var) %>%
enframe()
apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value))
apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value)) %>%
slice_head(n=500)
var_genes <- apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value)) %>%
slice_head(n=500) %>%
pull(name)
var_genes
tpm_subset<-txi$abundance[var_genes, ]
# check to see we really only have 500 genes
dim(tpm_subset)
# plot heatmap
pheatmap(tpm_subset,
scale = "row",
clustering_method = "ward.D",
cluster_rows=T, show_rownames=FALSE,
cluster_cols=T, show_colnames = T,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information using left_join!
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_label(aes(label=sample_id))
# plot heatmap
pheatmap(tpm,
scale = "row",
clustering_method = "ward.D",
cluster_rows=T, show_rownames=FALSE,
cluster_cols=T, show_colnames = T,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
apply(txi$abundance,MAR=1, FUN=var) %>%
enframe()
apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value))
pacman::p_load(tidyverse, DESeq2,viridis,scales)
txi<-readRDS("./data/salmon_gene_counts.rds")
samples<-read_csv("./data/design_matrix.csv")
txi$abundance %>% head()
samples %>% head()
View(samples)
samples <- samples %>%
filter(tissue=="skin") %>%
mutate(condition=as.factor(paste(treatment, side, sep="_")))
View(samples)
View(txi)
## filter txi matrices
txi$abundance<-txi$abundance[,samples$sample_id]
txi$counts<-txi$counts[,samples$sample_id]
txi$length<-txi$length[,samples$sample_id]
dim(txi$abundance)
View(samples)
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
dds
dds
str(dds)
str(txi)
txi$abundance
dds@design
dds$design
counts(dds)
dds[["counts"]]
avgTxLength(dds)
assay(dds)
assay(dds)[["counts"]]
assay(dds)[["count"]]
assays(dds)[["count"]]
assays(dds)[["TxLengths"]]
assays(dds)[["avgTxLength"]]
counts(dds)
dds <- dds[rowSums(counts(dds)) >= 10,]
dds <- DESeq(dds)
results(dd)
results(dds)
resultsNames(dds)
results(dds)
results(dds) %>%
as.data.frame() %>%
arrange(padj)
results(dds) %>%
as.data.frame() %>%
arrange(padj) %>%
head
results(dds)
counts(dds)[rownames(res)[is.na(res$padj)],] %>% head(15)
counts(dds)[rownames(res)[is.na(res$padj)],] %>% head(15)
res<-results(dds)
counts(dds)[rownames(res)[is.na(res$padj)],] %>% head(15)
res
results(dd)
results(dds)
resultsNames(dds)
# 1. using the result names:
results(dds, name="condition_white_dorsal_vs_black_dorsal")
# 2. using contrasts:
results(dds, contrast=c("condition","white_dorsal","white_ventral"))
# white dorsal vs white ventral
res_wD_wV<-results(dds, contrast=c("condition","white_dorsal","white_ventral"))
# black dorsal vs black ventral
res_bD_bV<-results(dds, contrast=c("condition","black_dorsal","black_ventral"))
# black dorsal vs white dorsal
res_bD_wD<-results(dds, contrast=c("condition","black_dorsal","white_dorsal"))
# black ventral vs white ventral
res_bV_wV<-results(dds, contrast=c("condition","black_ventral","white_ventral"))
res<-list(bD_bV = res_bD_bV,
wD_wV = res_wD_wV,
bV_wV = res_bV_wV,
bD_wD = res_bD_wD)
res_bD_wD
summary(res_bD_wD)
summary(res_bD_bV)
lapply(res, summary, alpha=0.05)
1:length(res)
for(i in 1:length(res)){
summary(res[[i]], alpha=0.5)
}
lapply(X = res, FUN = summary)
lapply(X = res, FUN = summary, alpha=0.5)
clear()
for(i in 1:length(res)){
summary(res[[i]], alpha=0.5)
}
summary(res[[i]], alpha=0.05)
lapply(X = res, FUN = summary, alpha=0.05)
DESeq2::plotMA(res_bD_bV)
res_bD_bV
?DESeq2::plotMA()
?plotMA()
DESeq2::plotMA(res_bD_bV)
DESeq2::plotMA(res_bD_bV, ylim=c(5,5))
DESeq2::plotMA(res_bD_bV, ylim=c(3,3))
DESeq2::plotMA(res_bD_bV))
DESeq2::plotMA(res_bD_bV)
lapply(X=res, FUN=DESeq2::plotMA)
par(mfrow=c(2,2))
lapply(X=res, FUN=DESeq2::plotMA)
lapply(names(res),function(x) DESeq2::plotMA(res[[x]], main=x, alpha=0.05))
res_bD_bV %>%
as.data.frame() %>%
ggplot(aes(baseMean, log2FoldChange, colour=padj)) +
geom_point(size=1) +
scale_y_continuous(limits=c(-3, 3), oob=squish) + # oob from the scales package is needed to "squish" points falling outside the axis limits
scale_x_log10() +
geom_hline(yintercept = 0, colour="red", size=1, linetype="longdash") +
labs(x="mean of normalized counts", y="log fold change") +
scale_colour_viridis(direction=-1, trans='sqrt') +
geom_density_2d(colour="blue", size=0.5) +
theme_bw()
xtrop<-read_csv("./data/PCU23_annotations_xtr105.csv")
View(xtrop)
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
head(xtrop)
View(xtrop)
summary(res$bD_bV, alpha=0.05)
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
res$bD_bV
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05,
log2FoldChange>0) %>%
pull(gene)
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
extract_degs<-function(x){
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene) %>%
return()
}
extract_degs(x=res$bD_bV)
extract_degs(x=res$wD_wV)
lapply(res, extract_degs)
sig_deg<-lapply(res, extract_degs)
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram, UpSetR,plotly,ggrepel)
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")],
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show = TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq"))
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=padj)) +
geom_point(alpha=0.75, shape=16)
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
View(xtrop)
gg<-res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
ggplotly(gg, tooltip = "text")
iris
iris %>%
iris %>% head()
iris as_tibble() %>% head()
iris %>% as_tibble() %>% head()
iris %>%
as_tibble() %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width, fill=Species)) +
geom_point()
gg_iris<-iris %>%
as_tibble() %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width, fill=Species)) +
geom_point()
ggplotly(gg_iris)
gg_iris<-iris %>%
as_tibble() %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point()
ggplotly(gg_iris)
gg_iris<-iris %>%
as_tibble() %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width, color=Species,
text="hello")) +
geom_point()
ggplotly(gg_iris, tooltip = "text")
gg_iris<-iris %>%
as_tibble() %>%
ggplot(aes(x=Sepal.Length, y=Sepal.Width, color=Species,
text=paste(Sepal.Length, Sepal.Width))) +
geom_point()
ggplotly(gg_iris, tooltip = "text")
gg<-res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
ggplotly(gg, tooltip = "text")
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data=. %>% filter(sig),
aes(label=xtr_pep_name_x),
max.overlaps = 50,
size=2) +
xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
