ggplot(mapping=aes(x = Sepal.Width, fill=Species)) +
geom_histogram()
irirs %>%
group_by(Species) +
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) +
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar()
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
stat_summary(fun.y=mean,position=position_dodge(0.95),geom="errorbar")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=max(Sepal.Width))) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=max(Sepal.Width))) +
geom_bar(stat="identity")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y="mean",geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y="mean",geom="bar")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
---
title: "Data Visualization"
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
library(sf)
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
world <- ne_countries(scale = "medium", returnclass = "sf")
mi_counties <- map_data("county", "michigan")
mi_counties
# load data
iris<-iris %>% as_tibble()
iris
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method="lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth() +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# multiple regression slopes
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# multiple regression slopes
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# a single regression slope
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE)
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE)
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1
glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# call just the model
mod1
mod1
# summarize model:
summary(mod1)
library(tidyverse)
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length)) +
geom_point()
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length)) +
geom_point() +
geom_smooth(method="lm")
mod1<-lm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-lm(Sepal.Length ~ Sepal.Width, data=iris)
# call just the model
mod1
# summarize model:
summary(mod1)
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point() +
geom_smooth(method="lm")
mod4<-lm(Sepal.Length~Sepal.Width+Species, data=iris)
summary(mod4)
# filter data to only two groups. We have to also remember to drop the factor levels!
iris2<-iris %>%
filter(Species!="setosa") %>%
mutate(Species=fct_drop(Species))
#
t.test(iris2$Sepal.Length ~ iris2$Species)
aov1<-aov(iris$Sepal.Length ~ iris$Species)
aov1
# to get the test statistics, we have to summarize this model first:
summary(aov1)
aov1
# to get the test statistics, we have to summarize this model first:
summary(aov1)
TukeyHSD(aov1)
aov1
TukeyHSD(aov1)
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2,viridis,scales)
txi<-readRDS("./data/salmon_gene_counts.rds")
samples<-read_csv("./data/design_matrix.csv")
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
txi<-readRDS("./data/salmon_gene_counts.rds")
samples<-read_csv("./data/design_matrix.csv")
View(samples)
samples <- samples %>%
filter(tissue=="skin") %>%
mutate(condition=paste(treatment, side, sep="_") %>%
as.factor())
View(samples)
txi$abundance
samples$sample_id
## filter txi matrices
txi$abundance<-txi$abundance[,samples$sample_id]
txi$counts<-txi$counts[,samples$sample_id]
txi$length<-txi$length[,samples$sample_id]
samples
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
dds
txi$abundance
dds
assayNames(dds)
# call a specific assay by name
assay(dds, "counts") %>% head()
assay(dds, "avgTxLength") %>% head()
# call a specific assay with a specific function
counts(dds) %>% head()
txi$counts %>% head()
colData(dds)
rowData(dds)
# keep only rows with with counts summing up to 10 or more
dds <- dds[rowSums(counts(dds)) >= 10,]
dds
dds <- DESeq(dds)
dds
assayNames(dds)
dds
rowData(dds)
resultsNames(dds)
res<-results(dds)
res
res
counts(dds) %>%
as.data.frame() %>%
filter(is.na(res$padj)) %>%
head()
res
resultsNames(dds)
# 1. using the result names:
results(dds, name="condition_white_dorsal_vs_black_dorsal")
# 2. using contrasts:
results(dds, contrast=c("condition","white_dorsal","black_dorsal"))
# white dorsal vs white ventral
res_wD_wV<-results(dds, contrast=c("condition","white_dorsal","white_ventral"))
# black dorsal vs black ventral
res_bD_bV<-results(dds, contrast=c("condition","black_dorsal","black_ventral"))
# black dorsal vs white dorsal
res_bD_wD<-results(dds, contrast=c("condition","black_dorsal","white_dorsal"))
# black ventral vs white ventral
res_bV_wV<-results(dds, contrast=c("condition","black_ventral","white_ventral"))
summary(res_wD_wV, alpha=0.05)
summary(res_wD_wV, alpha=0.05)
summary(res_bD_bV, alpha=0.05)
summary(res_bD_wD, alpha=0.05)
summary(res_bV_wV, alpha=0.05)
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
par(mfrow=c(2,2))
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
par(mfrow=c(2,2))
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_bV, main="Black Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_wD, main="Black Dorsals vs. White Dorsal")
DESeq2::plotMA(res_bV_wV, main="Black Ventral vs. White Ventral")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_bV, main="Black Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_wD, main="Black Dorsals vs. White Dorsal")
DESeq2::plotMA(res_bV_wV, main="Black Ventral vs. White Ventral")
par(mfrow=c(1,1))
res_bD_bV %>%
as.data.frame() %>%
ggplot(aes(baseMean, log2FoldChange, colour=padj)) +
geom_point(size=1) +
scale_y_continuous(limits=c(-5, 5), oob=squish) + # oob from the scales package is needed to "squish" points falling outside the axis limits
scale_x_log10() +
geom_hline(yintercept = 0, colour="red", size=1, linetype="longdash") +
labs(x="mean of normalized counts", y="log fold change") +
scale_colour_viridis(direction=-1, trans='sqrt') +
geom_density_2d(colour="blue", size=0.5) +
theme_bw()
summary(res_wD_wV, alpha=0.05)
res_wD_wV
res_wD_wV$pvalue
hist(res_wD_wV$pvalue, breaks=50, col="grey", main="wD_wV")
par(mfrow=c(2,2))
par(mar=c(4,4,1,1))
hist(res_wD_wV$pvalue, breaks=50, col="grey", main="wD_wV")
hist(res_bD_bV$pvalue, breaks=50, col="grey", main="_bD_bV")
hist(res_bD_wD$pvalue, breaks=50, col="grey", main="bD_wD")
hist(res_bV_wV$pvalue, breaks=50, col="grey", main="bV_wV")
par(mfrow=c(1,1))
plotDispEsts(dds)
# make a results folder if it does not yet exist
dir.create("results", showWarnings = FALSE)
# export individual results tables like so:
write.csv(as.data.frame(res_wD_wV), "./results/deseq2_res_wD_wV.csv")
# but for convenience, we can export them all as a list object and save it as an .rds file
saveRDS(list(
bD_bV = res_bD_bV,
wD_wV = res_wD_wV,
bV_wV = res_bV_wV,
bD_wD = res_bD_wD),
"./results/deseq2_results.rds")
# export the DESeq2 object as an .rds files
saveRDS(dds, "./results/deseq2_dds.rds")
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram,UpSetR,plotly,ggrepel,scico)
# DEG object
dds<-readRDS("./results/deseq2_dds.rds")
# the list of DEG results
res<-readRDS("./results/deseq2_results.rds")
# Load BLAST results
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
View(xtrop)
res$bD_bV
summary(res$bD_bV, alpha=0.05)
class(res$bD_bV)
res$bD_bV %>%
as_tibble(rownames = "gene")
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
summary(res$bD_bV, alpha=0.05)
# turn it into a function so we can apply it to a list!
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
# turn it into a function so we can apply it to a list!
extract_degs<-function(x) {
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
}
extract_degs
extract_degs(x=res$bD_bV)
#  extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_scico(palette = "batlow")
# comparing just the dorsal vs. ventral
sig_deg %>%
ggVennDiagram(edge_size = 0) +
scale_fill_scico(palette = "batlow")
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show = TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq"))
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
res$bD_bV %>% %>%
res$bD_bV %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
View(xtrop)
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id"))
geom_point(alpha=0.75, shape=16) +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=pep_description)) +
geom_point(alpha=0.75, shape=16) +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg<-res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=pep_description)) +
geom_point(alpha=0.75, shape=16) +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
ggplotly(gg, tooltip = text)
ggplotly(gg, tooltip = "text")
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
# we can now turn this into an interactive plot:
ggplotly(gg_res, tooltip="text")
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data=. %>% filter(sig),
aes(label=xtr_pep_name_x),
max.overlaps = 50,
size=2) +
xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
