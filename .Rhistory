ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(breaks = seq(1,5, 1))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(breaks = seq(1,5, 0.5))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(breaks = 0.5)
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1,5))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length", x="Sepal Width")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", x="Sepal Width (cm)") +
theme(legend.position="none")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", x="Sepal Width (cm)") +
theme(legend.position="bottom")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
theme(legend.position="bottom")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
theme(legend.position="bottom",
title = "test")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
theme(legend.position="bottom",
title = element_text("test"))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
ggtitle("Iris Sepals")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
ggtitle("Iris Sepals") +
theme(legend.position="bottom")
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
scale_colour_manual(values = c(setosa="skyblue1", versicolor="#c70039", virginica="#28b463")) +
scale_x_continuous(n.breaks = 10) +
scale_y_continuous(limits = c(1.5,5)) +
labs(x="Sepal Length (cm)", y="Sepal Width (cm)") +
ggtitle("Iris Sepals") +
theme_bw()
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
theme_bw()
iris  %>%
group_by(Species) %>%
pivot_longer(names_to = "measurement", values_to = "values") %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
theme_bw()
iris  %>%
group_by(Species) %>%
pivot_longer(names_to = "measurement", values_to = "values")
iris  %>%
group_by(Species) %>%
pivot_longer(cols = c(Sepal.Length, Sepal.Width), names_to = "measurement", values_to = "values")
iris  %>%
pivot_longer(cols = Species, names_to = "measurement", values_to = "values") %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
theme_bw()
iris  %>%
pivot_longer(cols = Species, names_to = "measurement", values_to = "values")
iris  %>%
pivot_longer(cols = -Species, names_to = "measurement", values_to = "values") %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
theme_bw()
iris  %>%
group_by() %>%
pivot_longer(cols = -Species, names_to = "measurement", values_to = "values")
iris  %>%
group_by("Species") %>%
pivot_longer(cols = -Species, names_to = "measurement", values_to = "values")
iris  %>%
group_by(Species) %>%
pivot_longer(cols = -Species, names_to = "measurement", values_to = "values") #%>%
iris  %>%
group_by(Species) %>%
pivot_longer(cols = -Species, names_to = "measurement", values_to = "values") %>%
ggplot(mapping=aes(x=measurment, y=values)) +
geom_point(mapping=aes(color=Species)) +
theme_bw()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point() + facet_wrap( ~ Species, nrow = 2)
iris  %>%
ggplot(mapping=aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +  # note, we have included the mapping variables here, not for the geom_point()
geom_point() +
facet_wrap( ~ Species, nrow = 1)
iris  %>%
ggplot(mapping=aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +  # note, we have included the mapping variables here, not for the geom_point()
geom_point() +
facet_wrap( ~ Species, nrow = 3)
iris  %>%
ggplot(mapping=aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +  # note, we have included the mapping variables here, not for the geom_point()
geom_point() +
facet_wrap( ~ Species, nrow = 1)
iris  %>%
ggplot(mapping=aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +  # note, we have included the mapping variables here, not for the geom_point()
geom_point() +
facet_wrap( ~ Species, nrow = 1) +
theme_bw() +
theme(legend.position = "none")
iris  %>%
ggplot(mapping=aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +  # note, we have included the mapping variables here, not for the geom_point()
geom_point() +
facet_wrap( ~ Species, nrow = 1, scales = "fixed") + # play arund with the number of rows and the s
theme_bw() +
theme(legend.position = "none") # we don't need the legend anymore.
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width, color = Species)) +
geom_bar(stat = "identity") +
```
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width, color = Species)) +
geom_bar(stat = "identity")
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_bar(stat = "identity")
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot()
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_point(alpha=0.5)
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_point(alpha=0.1)
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(alpha=0.1)
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(width=0.3)
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(width=0.1)
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(width=0.1, color="grey")
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(width=0.1, color="lightblue")
iris  %>%
ggplot(mapping=aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
ggtitle("Boxplot")
iris  %>%
ggplot(mapping=aes(y = Sepal.Width, fill=Species)) +
geom_density()
iris  %>%
ggplot(mapping=aes(x = Sepal.Width, fill=Species)) +
geom_density()
iris  %>%
ggplot(mapping=aes(x = Sepal.Width, fill=Species)) +
geom_density(alpha=0.5)
iris  %>%
ggplot(mapping=aes(x = Sepal.Width, fill=Species)) +
geom_histogram()
irirs %>%
group_by(Species) +
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) +
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width))
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar()
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width),
sd_width=sd(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
stat_summary(fun.y=mean,position=position_dodge(0.95),geom="errorbar")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=max(Sepal.Width))) +
stat_summary(fun.y=mean,geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=max(Sepal.Width))) +
geom_bar(stat="identity")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y="mean",geom="errorbar")
iris %>%
ggplot(aes(x=Species, y=Sepal.Width)) +
stat_summary(fun.y="mean",geom="bar")
iris %>%
group_by(Species) %>%
summarise(mean_width=mean(Sepal.Width)) %>%
ggplot(aes(x=Species, y=mean_width)) +
geom_bar(stat="identity")
---
title: "Data Visualization"
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
library(sf)
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
world <- ne_countries(scale = "medium", returnclass = "sf")
mi_counties <- map_data("county", "michigan")
mi_counties
# load data
iris<-iris %>% as_tibble()
iris
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method="lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species))
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth() +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# multiple regression slopes
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# multiple regression slopes
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
# a single regression slope
iris  %>%
ggplot(mapping=aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(mapping=aes(color=Species)) +
geom_smooth(method = "lm") +
ggtitle("Iris Sepals with linear regressions") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE)
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE)
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# load data
iris<-iris
# run a general linear model with a gaussian family
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1
glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-glm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
# call just the model
mod1
mod1
# summarize model:
summary(mod1)
library(tidyverse)
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length)) +
geom_point()
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length)) +
geom_point() +
geom_smooth(method="lm")
mod1<-lm(Sepal.Length ~ Sepal.Width, data=iris, family="gaussian")
mod1<-lm(Sepal.Length ~ Sepal.Width, data=iris)
# call just the model
mod1
# summarize model:
summary(mod1)
iris %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length, color=Species)) +
geom_point() +
geom_smooth(method="lm")
mod4<-lm(Sepal.Length~Sepal.Width+Species, data=iris)
summary(mod4)
# filter data to only two groups. We have to also remember to drop the factor levels!
iris2<-iris %>%
filter(Species!="setosa") %>%
mutate(Species=fct_drop(Species))
#
t.test(iris2$Sepal.Length ~ iris2$Species)
aov1<-aov(iris$Sepal.Length ~ iris$Species)
aov1
# to get the test statistics, we have to summarize this model first:
summary(aov1)
aov1
# to get the test statistics, we have to summarize this model first:
summary(aov1)
TukeyHSD(aov1)
aov1
TukeyHSD(aov1)
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,gprofiler2, scico)
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE,
fig.width = 12)
knitr::opts_knit$set(root.dir = '../')
library("webexercises")
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,gprofiler2, scico)
# the list of DEG results from the previous exercises
res<-readRDS("./results/deseq2_results.rds")
# the list of DEG results from the previous exercises
res<-readRDS("ADDA_taller2/results/deseq2_results.rds")
# the list of DEG results from the previous exercises
res<-readRDS("~/Documents/git_projects/ADDA_taller2/results/deseq2_results.rds")
# the annotations
xtrop<-read_csv("~/Documents/git_projects/ADDA_taller2/dat/PCU23_annotations_xtr105_genes.csv")
# the annotations
xtrop<-read_csv("~/Documents/git_projects/ADDA_taller2/data/PCU23_annotations_xtr105_genes.csv")
res
xtrop
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
# now extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# make a function that extracts matching X. tropicalis IDs
extract_xtr<-function(x) {
return(
xtrop %>%
filter(gene_id %in% x) %>%
pull(xtr_pep_id_x) %>%
unique()
)
}
# apply function to list of Pelobates IDs
xtr_deg<-lapply(sig_deg, FUN=extract_xtr)
str(xtr_deg)
sapply(sig_deg, length)
sapply(xtr_deg, length)
xtr_bg<-extract_xtr(rownames(res$bD_bV))
xtr_bg
# set base url:
set_base_url("https://biit.cs.ut.ee/gprofiler_archive3/e105_eg52_p16/")
xtr_deg
# run the analysis
res_ora<-gost(multi_query = FALSE, # returns separate results tables for multiquery
custom_bg = xtr_bg, # our background
query=xtr_deg, # our list of gene sets
organism="xtropicalis", # the organism our annotations belong to
exclude_iea = FALSE, # include GO terms that were electronically assigned
correction_method = "gSCS", # the recommended multiple testing correction.
sources=c("GO:BP","GO:CC","GO:MF", "KEGG","REAC"), # the functional sets we are interested in
evcodes=FALSE, ## evcodes TRUE needed for downstream analysis like enrichment maps in Cytoscape, but this takes longer.
significant= FALSE) # return all terms, not just the significant ones
# the results are stored as a "results" dataframe
head(res_ora$result)
res_ora$result %>%
filter(p_value<0.05) %>%
group_by(query) %>%
dplyr::count(query, sort=TRUE)
gostplot(res_ora)
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_color_scico(palette = "batlow", direction = 1) +
facet_grid(source~query,scales = "free_y",space = "free") +
theme_bw()
