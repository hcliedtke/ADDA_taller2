mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
### Full model
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~svl)
summary(mod1)
### Full model
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
plot(mod1)
shapiro.test(mod1$residuals) ### problematic
plot(mod1)
qqnorm(mod1$residuals); qqline(mod1$residuals, col="red")
mod1<-lm(dat_lm1$TL~dat_lm1$egg_area)
summary(mod1)
shapiro.test(mod1$residuals) ### problematic
plot(mod1)
summary(mod1)
mod1<-lm(dat_lm1$TL~dat_lm1$svl)
summary(mod1)
### Full model
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
### Full model
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~svl)
summary(mod1)
### Full model
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
shapiro.test(mod1$residuals) ### problematic
dat_lm1 %>%
ggplot(aes(x=egg_area, y=TL)) +
geom_point(aes(color=spawning_cat)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
dat_lm1 %>%
ggplot(aes(x=egg_area, y=TL)) +
geom_point(aes(color=spawning_cat)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
mod_tmp<-summary(phylolm(data = dat_lm1, phy=phy, formula=TL~egg_area, model = "lambda"))
mod_tmp$aic
mod_tmp
dat_lm1 %>%
ggplot(aes(x=egg_area, y=TL)) +
geom_point(aes(color=spawning_cat)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
mod_tmp<-summary(phylolm(data = dat_lm1, phy=phy, formula=TL~svl, model = "lambda"))
mod_tmp
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=spawning_cat)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=family)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
dat$family
dat_lm1<-dat_log %>%
filter(spawning_cat!="internal") %>%
select(species,spawning_cat,family,TL, egg_area, svl) %>%
drop_na() %>%
column_to_rownames("species")
dat_lm1
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=family)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=family)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="black") +
theme_bw() +
theme(legend.position = "none")
### mod specs
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
shapiro.test(mod1$residuals) ### problematic
summary(mod1)
### stepwise model selection
mod_step1<-phylostep(dat=dat_scaled, phy=phy, method="lambda", direction="both",
TL~egg_area+svl+spawning_cat)
### stepwise model selection
mod_step1<-phylostep(dat=dat_lm1, phy=phy, method="lambda", direction="both",
TL~egg_area+svl+spawning_cat)
summary(mod_step1)
library(AmphiNom, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
aswSearch("Bufo bufo")
library(AmphiNom)
asw_taxonomy_2023<-getTaxonomy()
aswSearch("Bufo bufo")
library("rjson")
# Passing argument files
myData <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
print(json_data_frame)
myData[1]
myData[[1]]
myData[[1]]
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
View(json_data_frame)
myData[[1]]
myData[[2]]
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
library("tidyverse")
df<-bind_rows(myData)
View(df)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
function (x, df1, df2, ncp, log = FALSE)
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
View(raw_data)
View(df)
# convert "," to "."
df<-read_csv2(df)
View(df)
# convert "," to "."
df2<-type_convert(df)
View(df2)
# convert "," to "."
df2<-type_convert(df, local="us")
# convert "," to "."
df2<-type_convert(df, locale="us")
# convert "," to "."
df2<-type_convert(df, locale=locale("us"))
# convert "," to "."
df2<-type_convert(df, locale=locale("es", decimal_mark = ","))
View(df2)
View(df2)
View(df2)
df2 %>%
select(fecha, is.numeric())
df2 %>%
select_if(is.numeric)
df2 %>%
select_if(is.numeric, "fecha")
df2 %>%
select(is.numeric, fecha)
df2 %>%
select(is.numeric(.), fecha)
# convert "," to "." and "Varias" to NA
df2<-type_convert(df, locale=locale("es", decimal_mark = ","),na = "Varias")
df2
df2 %>%
select(-c(indicativo,nombre, provincia))
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
pivot_longer(-)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
pivot_longer(-fecha)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.Date)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.numeric.POSIXt() )
select_if(is.numeric,is.numeric.POSIXt
df2 %>%
df2
class(df2$horatmin)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.difftime)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.numeric.difftime)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.difftime)
df2 %>%
#select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.difftime)
df2 %>%
#select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
facet_wrap(~name)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
geom_line() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y") +
theme_bw
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y") +
theme_bw()
test<-fromJSON("https://filesamples.com/samples/code/json/sample1.json")
"https://filesamples.com/samples/code/json/sample1.json"
c<-"https://filesamples.com/samples/code/json/sample1.json"
test<-fromJSON(c)
test<-fromJSON("~/Downloads/sample1.json")
source("~/json_to_df.R")
devtools::install_github("ropensci/rAltmetric")
library(rAltmetric)
altmetrics(doi = "10.1038/465860a")
etOption("altmetricKey")
GetOption("altmetricKey")
getOption("altmetricKey")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
# Chunk 2
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse, pheatmap)
# Chunk 3
txi<-readRDS("./data/salmon_gene_counts.rds")
# Chunk 4
str(txi)
lapply(X=txi, FUN=head)
# Chunk 5
apply(X=txi$abundance, FUN=sum, MARGIN = 2)
# Chunk 6
head(txi$counts[1:5,])
# Chunk 7
head(txi$length[1:5,])
# Chunk 8
samples<-read.csv("./data/design_matrix.csv")
# Chunk 9
samples
# Chunk 10
colnames(samples)
table(samples[,c("treatment","tissue")])
# Chunk 11
# remove 0-variance genes
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
# perform PCA on TRANSPOSED scaled, centered TPMs
pca<- prcomp(t(tpm),scale.=T, center=T)
## add metadata and plot
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
geom_point(size=3)
# get sample-to-sample distance (again, using the transposed abundance matrix))
sample_dist <- dist(t(tpm))
# convert to matrix
sample_dist_matrix <- as.matrix(sample_dist)
# plot
pheatmap(sample_dist_matrix,
scale = "row",
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
pheatmap(sample_dist_matrix)
# plot
pheatmap(sample_dist_matrix,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
# plot
pheatmap(sample_dist_matrix,scale = c("row","column"),
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
# plot
pheatmap(sample_dist_matrix,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"),
annotation_row=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
# Sort the rows in the abundance matrix (TPM) by the row-wise variance, and keep only the 500 most variable genes
var_genes <- apply(txi$abundance,MAR=1, FUN=var) %>%
enframe() %>%
arrange(desc(value)) %>%
slice_head(n=500) %>%
pull(name)
head(var_genes) # list of genes we want to keep
tpm_subset<-txi$abundance[var_genes, ]
# check to see we really only have 500 genes
dim(tpm_subset)
# plot heatmap
pheatmap(tpm_subset,
scale = "row",
clustering_method = "ward.D",
cluster_rows=T, show_rownames=FALSE,
cluster_cols=T, show_colnames = T,
annotation_col=data.frame(samples[,c("sample_id","tissue","treatment","side")], row.names = "sample_id"))
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
head(xtrop)
summary(res$bD_bV, alpha=0.05)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library("webexercises")
# Chunk 2
# set working directory
setwd("~/Documents/git_projects/ADDA_taller2/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram, UpSetR,plotly,ggrepel)
# Chunk 3
# DEG object
dds<-readRDS("./results/deseq2_dds.rds")
# the list of DEG results
res<-readRDS("./results/deseq2_results.rds")
# Load BLAST results
xtrop<-read_csv("./data/PCU23_annotations_xtr105.csv")
# Chunk 4
head(xtrop, 20)
# Chunk 5
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
head(xtrop)
# Chunk 6
summary(res$bD_bV, alpha=0.05)
summary(res$bD_bV, alpha=0.05)
# For a single comparison
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
# turn it into a function so we can apply it to a list!
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
#  extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# comparing just the dorsal vs. ventral
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")],
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show	= TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq"))
DESeq2::plotMA(res$bD_bV)
# apeglm shrinkage can only be done on already calculated coefficients:
resultsNames(dds)
bD_bV_res <- results(dds,
contrast= c("condition","white_ventral", "black_dorsal"))
bD_bV_res
# with shrinkage
bD_bV_shr<-lfcShrink(dds,
coef="condition_white_ventral_vs_black_dorsal",
type="apeglm")
bD_bV_shr
par(mfrow=c(1,2))
par(mar=c(4,4,4,1))
DESeq2::plotMA(bD_bV_res, main="MLE")
DESeq2::plotMA(bD_bV_shr, main="MAP")
par(mfrow=c(1,2))
par(mar=c(4,4,4,1))
DESeq2::plotMA(bD_bV_res, main="MLE")
DESeq2::plotMA(bD_bV_shr, main="MAP")
par(mfrow=c(1,2))
par(mar=c(4,4,1,1))
# p values
plot(bD_bV_res$padj~bD_bV_shr$padj,
xlab="adjusted p-value (shrunk)",
ylab="adjusted p-value (MLE)")
# fold changes
plot(bD_bV_res$log2FoldChange~bD_bV_shr$log2FoldChange,
xlab="Fold Change (shrunk)",
ylab="Fold Change (MLE)")
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
ggplotly(gg_res, tooltip="text")
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
ggplotly(gg_res, tooltip = "text")
